{"ast":null,"code":"function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar PasswordConfirmation = /*#__PURE__*/function () {\n  function PasswordConfirmation(form) {\n    _classCallCheck(this, PasswordConfirmation);\n\n    this.form = form;\n    console.log('form.elements:');\n    console.log(form.elements);\n    console.log('form.elements.user_password_confirmation: ');\n    console.log(form.elements.user_password_confirmation);\n    this.password = form.elements.user_password;\n    this.password_confirm = form.elements.user_password_confirmation;\n    console.log('Found reg_form. And maybe elements.');\n    console.log(this.password);\n    console.log(this.password_confirm);\n    this.setup();\n  }\n\n  _createClass(PasswordConfirmation, [{\n    key: \"setup\",\n    value: function setup() {\n      var _this = this;\n\n      this.form.addEventListener('keyup', function (event) {\n        if (_this.password.value != '') _this.checkPasswords();\n      });\n    }\n  }, {\n    key: \"checkPasswords\",\n    value: function checkPasswords() {\n      // this.resetStyleForInputs()\n      if (this.password_confirm.value == this.password.value) {\n        this.password_confirm.classList.add('input-green');\n        this.password_confirm.parentElement.classList.add('success');\n      } else {\n        this.password_confirm.classList.add('input-red');\n        this.password_confirm.parentElement.classList.add('error');\n      }\n    }\n  }]);\n\n  return PasswordConfirmation;\n}();\n\ndocument.addEventListener(\"turbolinks:load\", function () {\n  console.log('show_passwords_match.js working');\n  var reg_form = document.getElementById(\"new_user\");\n  console.log('reg_form:');\n  console.log(reg_form);\n  if (reg_form) new PasswordConfirmation(reg_form);\n});","map":{"version":3,"sources":["/Users/pr/Documents/GitHub/Rails/app/javascript/utilities/show_passwords_match.js"],"names":["PasswordConfirmation","form","console","log","elements","user_password_confirmation","password","user_password","password_confirm","setup","addEventListener","event","value","checkPasswords","classList","add","parentElement","document","reg_form","getElementById"],"mappings":";;;;;;IAAMA,oB;AACL,gCAAYC,IAAZ,EAAkB;AAAA;;AACjB,SAAKA,IAAL,GAAYA,IAAZ;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYF,IAAI,CAACG,QAAjB;AACAF,IAAAA,OAAO,CAACC,GAAR,CAAY,4CAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYF,IAAI,CAACG,QAAL,CAAcC,0BAA1B;AACA,SAAKC,QAAL,GAAgBL,IAAI,CAACG,QAAL,CAAcG,aAA9B;AACA,SAAKC,gBAAL,GAAwBP,IAAI,CAACG,QAAL,CAAcC,0BAAtC;AAEAH,IAAAA,OAAO,CAACC,GAAR,CAAY,qCAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKG,QAAjB;AACAJ,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKK,gBAAjB;AAEA,SAAKC,KAAL;AACA;;;;4BAEO;AAAA;;AACP,WAAKR,IAAL,CAAUS,gBAAV,CAA2B,OAA3B,EAAoC,UAAAC,KAAK,EAAI;AAC5C,YAAI,KAAI,CAACL,QAAL,CAAcM,KAAd,IAAuB,EAA3B,EAA+B,KAAI,CAACC,cAAL;AAC/B,OAFD;AAGA;;;qCAEgB;AAChB;AACA,UAAI,KAAKL,gBAAL,CAAsBI,KAAtB,IAA+B,KAAKN,QAAL,CAAcM,KAAjD,EAAwD;AACvD,aAAKJ,gBAAL,CAAsBM,SAAtB,CAAgCC,GAAhC,CAAoC,aAApC;AACA,aAAKP,gBAAL,CAAsBQ,aAAtB,CAAoCF,SAApC,CAA8CC,GAA9C,CAAkD,SAAlD;AACA,OAHD,MAGO;AACN,aAAKP,gBAAL,CAAsBM,SAAtB,CAAgCC,GAAhC,CAAoC,WAApC;AACA,aAAKP,gBAAL,CAAsBQ,aAAtB,CAAoCF,SAApC,CAA8CC,GAA9C,CAAkD,OAAlD;AACA;AACD;;;;;;AAGFE,QAAQ,CAACP,gBAAT,CAA0B,iBAA1B,EAA6C,YAAW;AACvDR,EAAAA,OAAO,CAACC,GAAR,CAAY,iCAAZ;AACA,MAAMe,QAAQ,GAAGD,QAAQ,CAACE,cAAT,CAAwB,UAAxB,CAAjB;AACAjB,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYe,QAAZ;AACA,MAAIA,QAAJ,EAAc,IAAIlB,oBAAJ,CAAyBkB,QAAzB;AACd,CAND","sourcesContent":["class PasswordConfirmation {\n\tconstructor(form) {\n\t\tthis.form = form\n\t\tconsole.log('form.elements:')\n\t\tconsole.log(form.elements)\n\t\tconsole.log('form.elements.user_password_confirmation: ')\n\t\tconsole.log(form.elements.user_password_confirmation)\n\t\tthis.password = form.elements.user_password\n\t\tthis.password_confirm = form.elements.user_password_confirmation\n\n\t\tconsole.log('Found reg_form. And maybe elements.')\n\t\tconsole.log(this.password)\n\t\tconsole.log(this.password_confirm)\n\n\t\tthis.setup()\n\t}\n\n\tsetup() {\n\t\tthis.form.addEventListener('keyup', event => {\n\t\t\tif (this.password.value != '') this.checkPasswords()\n\t\t})\n\t}\n\n\tcheckPasswords() {\n\t\t// this.resetStyleForInputs()\n\t\tif (this.password_confirm.value == this.password.value) {\n\t\t\tthis.password_confirm.classList.add('input-green')\n\t\t\tthis.password_confirm.parentElement.classList.add('success')\n\t\t} else {\n\t\t\tthis.password_confirm.classList.add('input-red')\n\t\t\tthis.password_confirm.parentElement.classList.add('error')\n\t\t}\n\t}\n}\n\ndocument.addEventListener(\"turbolinks:load\", function() {\n\tconsole.log('show_passwords_match.js working')\n\tconst reg_form = document.getElementById(\"new_user\")\n\tconsole.log('reg_form:')\n\tconsole.log(reg_form)\n\tif (reg_form) new PasswordConfirmation(reg_form)\n});"]},"metadata":{},"sourceType":"module"}